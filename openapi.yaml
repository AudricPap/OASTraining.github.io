openapi: 3.0.3
info: 
  title: My API Short Name
  # Comment 
  # Lengthy description can use pipe syntax |
  description: |
    CommonMarks 
    
    # Heading 1
    ## Heading 2
    ### Heading 3
    #### Heading 4
    ##### Heading 5
    ###### Heading 6 (Max)
    
    - Bullet 1
      - Sub-bullet
        - Sub-sub bullet
          - Sub-sub-sub-bullet
    - Bullet 2
    
    
    **Bold**
    *Italic*
    ***BoldItalic***
    
    This is a summarry explaining what the API is about.
    
    [Link text](www.google.com)
    
    Image:
    
    ![Alt text](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png)
    
    ```word highlight```
    
    Python code:
    ```python
    def hello_world():
      print("Hello, world!")
    ```
    test
    ```xml
    <tag></tag>
    ```
  termsOfService: https://myCompanyTermsOfServiceURL.com/terms/
  contact:
    name: My Contact name or Company Name
    url: https://contactURL/form
    #email: supportemail@ptional.com
  license:
    name: "EazyShop License 2.0"
    url: https://www.mycompany.com/license/LICENSE-X.Y.html
  version: "1.0"
  x-custom-info:
    comment: Some comments
    authors:
      - name: John Doe
        email: john@doe.com 
      - name: Jane Doe
        email: jane@doe.com
externalDocs:
  description: External Documentation
  url: httpss://example.com
servers:
  - url: https://development.mycompany-server.com/v1
    description: Deveopment server
  - url: https://staging.mycompany-server.com/v1
    description: Staging server
  - url: https://api.mycompany-ver.com/v1
    description: Production server
  - url: https://{companyName}.server.com:{port}/{version}
    variables:
      companyName:
        description: This value is assigned by the service provider.
        default: "demo"
      port:
        enum:
          - "883"
          - "443"
        default: "883"
      version:
        default: "v1"
tags:
  - name: Categories
    description: Categories-related methods
  - name: Products
    description: Products-related methods
  - name: Orders
    description: Orders-related methods
security:
  - BasicAuth: []
  - BearerAuth: []
  - ApiKeyAuth: []
  - OAuth2AuthCode:
    - read
    - write
    - admin
paths:
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Returns all categories in EazyShop catalog
      #/category?{categoryId}
      operationId: getCategories
      # forcing security basic auth for this API
      security:
        - BasicAuth: []
      parameters:
        - name: categoryId
          # in allowed values; allowedValues: path, query, header, cookie
          in: query
          schema: 
            type: integer
            minimum: 100
            maximum: 1000
          examples:
            mobiles:
              summary: Mobiles
              value: 101
            laptops:
              summary: Laptops
              value: 102
            headphones:
              summary: Headphones
              value: 103
            televisions:
              summary: Televisions
              value: 104
          required: false
      responses:
        # 1st possible reponse for the get method
        '200':
          description: Successful - Get all categories
          content:
            application/json:
              # Schema: how this reponse body will look like
              schema:
                # possible values for type: string, number, integer, boolean, array, object
                # the response is an array of object
                # each object has a ctagory id and name
                type: array
                items:
                  $ref: "#/components/schemas/Product"
              examples:
                all-categories-data:
                  summary: All categories (no query param)
                  value:
                    - categoryId: 101
                      categoryName: Mobiles
                    - categoryId: 102
                      categoryName: Laptops
                    - categoryId: 103
                      categoryName: Headphones
                    - categoryId: 104
                      categoryName: Televisions
                single-category-data:
                  summary: Single category (query param provided)
                  value:
                    - categoryId: 101
                      categoryName: Mobiles
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /categories/{categoryId}:
    get:
      tags:
        - Categories
      summary: Get a category by id
      description: Returns a specific category in EazyShop catalog
      operationId: getCategoryById
      # forcing no security for this API ==> public API
      security: []
      parameters:
        - name: categoryId
          in: path
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 100
          required: true
      responses:
        '200':
          description: Sucessful - Get a category by id
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/Category"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Return all products in EazyShop catalog
      operationId: getProducts
      parameters:
        - name: categoryId
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 100
          required: false
      responses:
        '200':
          description: Successful - Get all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get a product
      description: Return a specific product in EazyShop catalog
      operationId: getProductsById
      parameters:
        - name: productId
          in: path
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 100
          required: true
      responses:
        '200':
          description: Successful - Get a product by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /orders:
    post:
      tags:
        - Categories
      summary: Post an order
      description: Create an order in EazyShop
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    $ref: "#/components/schemas/Product"
                address:
                  $ref: "#/components/schemas/Address"
      responses:
        '201':
          description: Successful - Post an order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          links:
            GetOrderId:
               $ref: "#/components/links/c-links-GetOrderById"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
    put:
      tags:
        - Orders
      summary: Put an order
      description: Update an order
      operationId: UpdateOrder
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    $ref: "#/components/schemas/Product"
                address:
                  $ref: "#/components/schemas/Address"
      responses:
        '200':
          description: Successful - Put an order
          content:
            applciation/json:
              schema:
                $ref: "#/components/schemas/Order"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
    delete:
      tags:
        - Orders
      summary: Delete an order
      operationId: deleteOrder
      parameters:
        - $ref: "#/components/parameters/c-parameters-orderIdQueryParam"
      description: Delete an order
      responses:
        '204':
          description: Successful - Delete an order
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
          
    get:
      tags:
        - Orders
      summary: Get orders
      description: Return all orders for the logged-in customer
      operationId: getOrders
      parameters:
        - $ref: "#/components/parameters/c-parameters-orderIdQueryParam"
      responses:
        '200':
          description: Successful - Get all orders
          content:
            application/json:
              schema:
                # Return an array of orders object
                type: array
                items:
                  # An order object...
                  type: object
                  properties:
                    # ... has orderId
                    orderId:
                      type: integer
                    # ... has an address object
                    address:
                      # An address object has...
                      type: object
                      properties:
                        # ... has an address 1
                        address1:
                          type: string
                        # ... has an addressCity
                        addressCity:
                            type: string
                        # ... has an adressState
                        addressState:
                            type: string
                        # ... has a addressZipCode
                        addressZipCode:
                          type: string      
                    # ... has an array of products object
                    products:
                      type: array
                      items:
                        # A product object...
                        type: object
                        properties:
                          # ... has a productId
                          productId:
                            type: integer
                          # ... has a productName
                          productName:
                            type: string
                          # ... has a categoryId
                          categoryId:
                            type: integer
                          # ... has a categoryName
                          categoryName:
                            type: string
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get an order by id
      description: Return an order
      parameters:
        - name: orderId
          in: path
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 100
          required: true
      responses:
        '200':
          description: Successful - Get an order by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /oneOfOrder:
    post:
      tags:
      - Orders
      summary: Insert OneOf the Order Details
      description: Insert OneOf the Order details into EazyShop
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: object
                  # It means the schema in the request can STRICTLY be one of and only one of the schema
                  oneOf:
                  - $ref: "#/components/schemas/Mobile"
                  - $ref: "#/components/schemas/Laptop"
                address:
                  $ref: "#/components/schemas/Address"
              required:
                - products
                - address
      responses:
        '200':
          description: Order placed successfully
  /anyofOrder:
    get:
      tags:
      - Orders
      summary: Get Order Details
      description: Get Order Details base don Order ID
      parameters:
        - $ref: "#/components/parameters/c-parameters-orderIdQueryParam"
        - name: fetchType
          in: query
          required: true
          schema:
            type: string
            enum:
              - summary
              - details
          description: >
            Fetch Type:
             * `summary` - Will provide Order Summary
             * `details` - Will provide Order Summary & Order Address
      responses:
        '200':
          description: Return product details
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/OrderSummary"
                  - $ref: "#/components/schemas/OrderAddress"
components:
  parameters:
    c-parameters-orderIdQueryParam:
      name: orderId
      in: query
      required: true
      schema:
        type: integer
  schemas:
    Address:
      type: object
      properties:
        address1:
          type: string
          example: "74 O'Riordan St"
        addressCity:
          type: string
          example: "Alexandria"
        addressState:
          type: string
          example: "NSW"
        addressZipCode:
          type: string
          example: "2015"
        adressIsOffice:
          type: boolean
          default: false
        adressType:
          type: string 
          enum:
            - Home
            - Office
      # two to write required bracket comma separated [,,,] and each line with ahyphen '-'
      required: [address1, addressCity, addressState, addressZipCode]
    Product:
      type: object
      properties:
        productId:
          type: integer
          example: 101
        productName:
          type: string
          example: "Apple IPhone 13 Pro"
        productPrice:
          type: number
          format: float
          example: 999.99
        categoryId:
          type: integer
          example: "A"
        categoryName:
            type: string
            example: "Mobiles"
        #releaseDate can be marked as producer only and not to be sued by consumers
        # only appears in the response
        releaseDate:
          type: string
          format: date-time
          readOnly: true
          example: "2024-11-02T08:25:47.131Z"
        stockQuantity:
          type: integer
          example: 2500
    Category:
      type: object
      properties:
        categoryId:
          type: integer
        categoryName:
          type: string
          nullable: true
          # only appears in the request
          #writeOnly: true
    Order:
      type: object
      properties:
        orderId:
          type: integer
      required: [orderId]
    Mobile:
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          properties:
            networkType:
              type: string
              enum:
                - "4G"
                - "5G"
          required: [networkType]
    Laptop:
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          properties:
            ram:
              type: string
              enum:
                - "8GB"
                - "16 GB"
                - "32 GB"
    OrderSummary:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    OrderAddress:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/Address"
  responses:
    c-responses-InternalServerError:
      description: |
        An error occurred while processing the request. Please retry your request in few minutes.
  links:
    c-links-GetOrderById:
      description: >
        The `order` value returned in the respons ecan be used as input parameter in `GET /orders`.
      operationId: getProducts
      parameters:
        orderId: '$response.body#/orderId'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    OAuth2AuthCode:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/api/oauth.access
          scopes:
            read: Read-only access
            write: Read Write Access
            admin: admin access
