openapi: 3.0.3
info: 
  title: My API Short Name
  # Comment 
  # Lengthy description can use pipe syntax |
  description: |
    CommonMarks 
    
    # Heading 1
    ## Heading 2
    ### Heading 3
    #### Heading 4
    ##### Heading 5
    ###### Heading 6 (Max)
    
    - Bullet 1
      - Sub-bullet
        - Sub-sub bullet
          - Sub-sub-sub-bullet
    - Bullet 2
    
    
    **Bold**
    *Italic*
    ***BoldItalic***
    
    This is a summarry explaining what the API is about.
    
    [Link text](www.google.com)
    
    Image:
    
    ![Alt text](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png)
    
    ```word highlight```
    
    Python code:
    ```python
    def hello_world():
      print("Hello, world!")
    ```
    test
    ```xml
    <tag></tag>
    ```
  termsOfService: https://myCompanyTermsOfServiceURL.com/terms/
  contact:
    name: My Contact name or Company Name
    url: https://contactURL/form
    #email: supportemail@ptional.com
  license:
    name: "EazyShop License 2.0"
    url: https://www.mycompany.com/license/LICENSE-X.Y.html
  version: "1.0"
servers:
  - url: https://development.mycompany-server.com/v1
    description: Deveopment server
  - url: https://staging.mycompany-server.com/v1
    description: Staging server
  - url: https://api.mycompany-ver.com/v1
    description: Production server
  - url: https://{companyName}.server.com:{port}/{version}
    variables:
      companyName:
        description: This value is assigned by the service provider.
        default: "demo"
      port:
        enum:
          - "883"
          - "443"
        default: "883"
      version:
        default: "v1"
tags:
  - name: Categories
    description: Categories-related methods
  - name: Products
    description: Products-related methods
  - name: Orders
    description: Orders-related methods

paths:
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Returns all categories in EazyShop catalog
      #/category?{categoryId}
      parameters:
        - name: categoryId
          # in allowed values; allowedValues: path, query, header, cookie
          in: query
          schema: 
            type: integer
            minimum: 100
            maximum: 1000
          examples:
            empty:
              summary: ""
              value: ""
            mobiles:
              summary: Mobiles
              value: 101
            laptops:
              summary: Laptops
              value: 102
            headphones:
              summary: Headphones
              value: 103
            televisions:
              summary: Televisions
              value: 104
          required: false
      responses:
        # 1st possible reponse for the get method
        '200':
          description: Successful - Get all categories
          content:
            application/json:
              # Schema: how this reponse body will look like
              schema:
                # possible values for type: string, number, integer, boolean, array, object
                # the response is an array of object
                # each object has a ctagory id and name
                type: array
                items:
                  $ref: "#/components/schemas/Product"
              examples:
                all-categories-data:
                  summary: All categories (no query param)
                  value:
                    - categoryId: 101
                      name: Mobiles
                    - categoryId: 102
                      name: Laptops
                    - categoryId: 103
                      name: Headphones
                    - categoryId: 104
                      name: Televisions
                single-category-data:
                  summary: Single category (query param provided)
                  value:
                    - categoryId: 101
                      name: Mobiles
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /categories/{categoryId}:
    get:
      tags:
        - Categories
      summary: Get a category by id
      description: Returns a specific category in EazyShop catalog
      parameters:
        - name: categoryId
          in: path
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 100
          required: true
      responses:
        '200':
          description: Sucessful - Get a category by id
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/Category"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Return all products in EazyShop catalog
      parameters:
        - name: categoryId
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 100
          required: false
      responses:
        '200':
          description: Successful - Get all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
              examples:
                product-data:
                  summary: Products example data
                  value:
                    - productId: 101
                      name:: Apple IPhone 13 Pro
                      price: 999.99
                      categoryName: Mobiles
                      quantity: 96
                    - productId: 102
                      name:: Samsung S22 Ultra
                      price: 899.99
                      categoryName: Mobiles
                      quantity: 121
                    - productId: 103
                      name:: OnePlus 10 Pro 5G
                      price: 749.99
                      categoryName: Mobiles
                      quantity: 67
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get a product
      description: Return a specific product in EazyShop catalog
      parameters:
        - name: productId
          in: path
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 100
          required: true
      responses:
        '200':
          description: Successful - Get a product by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /orders:
    post:
      tags:
        - Categories
      summary: Post an order
      description: Create an order in EazyShop
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    $ref: "#/components/schemas/Product"
                address:
                  $ref: "#/components/schemas/Address"
      responses:
        '201':
          description: Successful - Post an order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
    put:
      tags:
        - Orders
      summary: Put an order
      description: Update an order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    $ref: "#/components/schemas/Product"
                address:
                  $ref: "#/components/schemas/Address"
      responses:
        '200':
          description: Successful - Put an order
          content:
            applciation/json:
              schema:
                $ref: "#/components/schemas/Order"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
    delete:
      tags:
        - Orders
      summary: Delete an order
      parameters:
        - $ref: "#/components/parameters/c-parameters-orderIdQueryParam"
      description: Delete an order
      responses:
        '204':
          description: Successful - Delete an order
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
          
    get:
      tags:
        - Orders
      summary: Get orders
      description: Return all orders for the logged-in customer
      parameters:
        - $ref: "#/components/parameters/c-parameters-orderIdQueryParam"
      responses:
        '200':
          description: Successful - Get all orders
          content:
            application/json:
              schema:
                # Return an array of orders object
                type: array
                items:
                  # An order object...
                  type: object
                  properties:
                    # ... has orderId
                    orderId:
                      type: integer
                    # ... has an address object
                    address:
                      # An address object has...
                      type: object
                      properties:
                        # ... has an address 1
                        address1:
                          type: string
                        # ... has an addressCity
                        addressCity:
                            type: string
                        # ... has an adressState
                        addressState:
                            type: string
                        # ... has a addressZipCode
                        addressZipCode:
                          type: string      
                    # ... has an array of products object
                    products:
                      type: array
                      items:
                        # A product object...
                        type: object
                        properties:
                          # ... has a productId
                          productId:
                            type: integer
                          # ... has a productName
                          productName:
                            type: string
                          # ... has a categoryId
                          categoryId:
                            type: integer
                          # ... has a categoryName
                          categoryName:
                            type: string
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get an order by id
      description: Return an order
      parameters:
        - name: orderId
          in: path
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 100
          required: true
      responses:
        '200':
          description: Successful - Get an order by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '500':
          $ref: "#/components/responses/c-responses-InternalServerError"
components:
  parameters:
    c-parameters-orderIdQueryParam:
      name: orderId
      in: query
      required: true
      schema:
        type: integer
  schemas:
    Address:
      type: object
      properties:
        address1:
          type: string
        addressCity:
          type: string
        addressState:
          type: string
        addressZipCode:
          type: string
      required: [address1, addressCity, addressState, addressZipCode]
    Product:
      type: object
      properties:
        productId:
          type: integer
        productName:
          type: string
        productPrice:
          type: number
          format: float
        categoryId:
          type: integer
        categoryName:
            type: string
        releaseDate:
          type: string
          format: date
        orderQuantity:
          type: integer
    Category:
      type: object
      properties:
        categoryId:
          type: integer
        categoryName:
          type: string
    Order:
      type: object
      properties:
        orderId:
          type: integer
  responses:
    c-responses-InternalServerError:
      description: |
        An error occured while processing the request. Please retry your request in few minutes.
        